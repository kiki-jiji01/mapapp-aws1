{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport Auth from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getUserGroupsFromToken, TransformerMutationType } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate } from '../../util';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n\nexport var USER_CREDENTIALS;\n\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\n\nvar SubscriptionProcessor =\n/** @class */\nfunction () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n  }\n\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload) || {},\n        authMode = _a.authMode,\n        isOwner = _a.isOwner,\n        ownerField = _a.ownerField,\n        ownerValue = _a.ownerValue;\n\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n        opType = _b[0],\n        opName = _b[1],\n        query = _b[2];\n\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n\n    var rules = getAuthorizationRules(model); // Return null if user doesn't have proper credentials for private API with IAM auth\n\n    var iamPrivateAuth = defaultAuthType === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    } // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n\n\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (defaultAuthType === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || defaultAuthType === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validGroup) {\n      return {\n        authMode: defaultAuthType,\n        isOwner: false\n      };\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n\n\n    var cognitoOwnerAuthRules = defaultAuthType === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n\n\n    var oidcOwnerAuthRules = defaultAuthType === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Fallback: return default auth type\n\n\n    return {\n      authMode: defaultAuthType,\n      isOwner: false\n    };\n  };\n\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n\n    var ctlObservable = new Observable(function (observer) {\n      var promises = [];\n      var subscriptions = [];\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , Auth.currentCredentials()];\n\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _b.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , Auth.currentSession()];\n\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                err_2 = _b.sent();\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n\n                token = void 0;\n                return [4\n                /*yield*/\n                , Cache.getItem('federatedInfo')];\n\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3\n                /*break*/\n                , 8];\n                token = federatedInfo.token;\n                return [3\n                /*break*/\n                , 10];\n\n              case 8:\n                return [4\n                /*yield*/\n                , Auth.currentAuthenticatedUser()];\n\n              case 9:\n                currentUser = _b.sent();\n\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n\n                _b.label = 10;\n\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n\n                return [3\n                /*break*/\n                , 12];\n\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3\n                /*break*/\n                , 12];\n\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var queriesMetadata;\n\n                      var _this = this;\n\n                      return __generator(this, function (_a) {\n                        queriesMetadata = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE].map(function (op) {\n                          return _this.buildSubscription(namespace, modelDefinition, op, userCredentials, cognitoTokenPayload, oidcTokenPayload);\n                        });\n                        queriesMetadata.forEach(function (_a) {\n                          var transformerMutationType = _a.opType,\n                              opName = _a.opName,\n                              query = _a.query,\n                              isOwner = _a.isOwner,\n                              ownerField = _a.ownerField,\n                              ownerValue = _a.ownerValue,\n                              authMode = _a.authMode;\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var variables, queryObservable, subscriptionReadyCallback;\n\n                            var _this = this;\n\n                            return __generator(this, function (_b) {\n                              variables = {};\n\n                              if (isOwner) {\n                                if (!ownerValue) {\n                                  // Check if there is an owner field, check where this error should be located\n                                  observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                  return [2\n                                  /*return*/\n                                  ];\n                                }\n\n                                variables[ownerField] = ownerValue;\n                              }\n\n                              queryObservable = API.graphql(__assign({\n                                query: query,\n                                variables: variables\n                              }, {\n                                authMode: authMode\n                              }));\n                              subscriptions.push(queryObservable.map(function (_a) {\n                                var value = _a.value;\n                                return value;\n                              }).subscribe({\n                                next: function (_a) {\n                                  var data = _a.data,\n                                      errors = _a.errors;\n\n                                  if (Array.isArray(errors) && errors.length > 0) {\n                                    var messages = errors.map(function (_a) {\n                                      var message = _a.message;\n                                      return message;\n                                    });\n                                    logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n\n                                    _this.drainBuffer();\n\n                                    return;\n                                  }\n\n                                  var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                  var _b = opName,\n                                      record = data[_b]; // checking incoming subscription against syncPredicate.\n                                  // once AppSync implements filters on subscriptions, we'll be\n                                  // able to set these when establishing the subscription instead.\n                                  // Until then, we'll need to filter inbound\n\n                                  if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                    _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                  }\n\n                                  _this.drainBuffer();\n                                },\n                                error: function (subscriptionError) {\n                                  var _a = subscriptionError.error,\n                                      _b = __read((_a === void 0 ? {\n                                    errors: []\n                                  } : _a).errors, 1),\n                                      _c = _b[0],\n                                      _d = (_c === void 0 ? {} : _c).message,\n                                      message = _d === void 0 ? '' : _d;\n\n                                  logger.warn('subscriptionError', message);\n\n                                  if (typeof subscriptionReadyCallback === 'function') {\n                                    subscriptionReadyCallback();\n                                  }\n\n                                  if (message.includes('\"errorType\":\"Unauthorized\"')) {\n                                    return;\n                                  }\n\n                                  observer.error(message);\n                                }\n                              }));\n                              promises.push(function () {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var boundFunction;\n\n                                  var _this = this;\n\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4\n                                        /*yield*/\n                                        , new Promise(function (res) {\n                                          subscriptionReadyCallback = res;\n                                          boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                          Hub.listen('api', boundFunction);\n                                        })];\n\n                                      case 1:\n                                        _a.sent();\n\n                                        Hub.remove('api', boundFunction);\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              }());\n                              return [2\n                              /*return*/\n                              ];\n                            });\n                          });\n                        });\n                        return [2\n                        /*return*/\n                        ];\n                      });\n                    });\n                  });\n                });\n                Promise.all(promises).then(function () {\n                  return observer.next(CONTROL_MSG.CONNECTED);\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        subscriptions.forEach(function (subscription) {\n          return subscription.unsubscribe();\n        });\n      };\n    });\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n\n      _this.drainBuffer();\n\n      return function () {\n        _this.dataObserver = null;\n      };\n    });\n    return [ctlObservable, dataObservable];\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n\n    var predicates = predicatesGroup.predicates,\n        type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n\n  return SubscriptionProcessor;\n}();\n\nexport { SubscriptionProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/subscription.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport Auth from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getUserGroupsFromToken, TransformerMutationType, } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate } from '../../util';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n    CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n    USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n    USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n    USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */ (function () {\n    function SubscriptionProcessor(schema, syncPredicates, amplifyConfig) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        this.schema = schema;\n        this.syncPredicates = syncPredicates;\n        this.amplifyConfig = amplifyConfig;\n        this.typeQuery = new WeakMap();\n        this.buffer = [];\n    }\n    SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload) {\n        var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n        var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload) || {}, authMode = _a.authMode, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue;\n        var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3), opType = _b[0], opName = _b[1], query = _b[2];\n        return { authMode: authMode, opType: opType, opName: opName, query: query, isOwner: isOwner, ownerField: ownerField, ownerValue: ownerValue };\n    };\n    SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload) {\n        if (cognitoTokenPayload === void 0) { cognitoTokenPayload = {}; }\n        if (oidcTokenPayload === void 0) { oidcTokenPayload = {}; }\n        var rules = getAuthorizationRules(model);\n        // Return null if user doesn't have proper credentials for private API with IAM auth\n        var iamPrivateAuth = defaultAuthType === GRAPHQL_AUTH_MODE.AWS_IAM &&\n            rules.find(function (rule) { return rule.authStrategy === 'private' && rule.provider === 'iam'; });\n        if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n            return null;\n        }\n        // Group auth should take precedence over owner auth, so we are checking\n        // if rule(s) have group authorization as well as if either the Cognito or\n        // OIDC token has a groupClaim. If so, we are returning auth info before\n        // any further owner-based auth checks.\n        var groupAuthRules = rules.filter(function (rule) {\n            return rule.authStrategy === 'groups' &&\n                ['userPools', 'oidc'].includes(rule.provider);\n        });\n        var validGroup = (defaultAuthType === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n            defaultAuthType === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n            groupAuthRules.find(function (groupAuthRule) {\n                // validate token against groupClaim\n                var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n                var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n                return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n                    return groupAuthRule.groups.find(function (group) { return group === userGroup; });\n                });\n            });\n        if (validGroup) {\n            return {\n                authMode: defaultAuthType,\n                isOwner: false,\n            };\n        }\n        // Owner auth needs additional values to be returned in order to create the subscription with\n        // the correct parameters so we are getting the owner value from the Cognito token via the\n        // identityClaim from the auth rule.\n        var cognitoOwnerAuthRules = defaultAuthType === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n            ? rules.filter(function (rule) {\n                return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n            })\n            : [];\n        var ownerAuthInfo;\n        cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n            var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n            if (ownerValue) {\n                ownerAuthInfo = {\n                    authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n                    isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n                    ownerField: ownerAuthRule.ownerField,\n                    ownerValue: ownerValue,\n                };\n            }\n        });\n        if (ownerAuthInfo) {\n            return ownerAuthInfo;\n        }\n        // Owner auth needs additional values to be returned in order to create the subscription with\n        // the correct parameters so we are getting the owner value from the OIDC token via the\n        // identityClaim from the auth rule.\n        var oidcOwnerAuthRules = defaultAuthType === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n            ? rules.filter(function (rule) { return rule.authStrategy === 'owner' && rule.provider === 'oidc'; })\n            : [];\n        oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n            var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n            if (ownerValue) {\n                ownerAuthInfo = {\n                    authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n                    isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n                    ownerField: ownerAuthRule.ownerField,\n                    ownerValue: ownerValue,\n                };\n            }\n        });\n        if (ownerAuthInfo) {\n            return ownerAuthInfo;\n        }\n        // Fallback: return default auth type\n        return {\n            authMode: defaultAuthType,\n            isOwner: false,\n        };\n    };\n    SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n        var event = capsule.payload.event;\n        if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n            completed();\n        }\n    };\n    SubscriptionProcessor.prototype.start = function () {\n        var _this = this;\n        var ctlObservable = new Observable(function (observer) {\n            var promises = [];\n            var subscriptions = [];\n            var cognitoTokenPayload, oidcTokenPayload;\n            var userCredentials = USER_CREDENTIALS.none;\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, Auth.currentCredentials()];\n                        case 1:\n                            credentials = _b.sent();\n                            userCredentials = credentials.authenticated\n                                ? USER_CREDENTIALS.auth\n                                : USER_CREDENTIALS.unauth;\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _b.sent();\n                            return [3 /*break*/, 3];\n                        case 3:\n                            _b.trys.push([3, 5, , 6]);\n                            return [4 /*yield*/, Auth.currentSession()];\n                        case 4:\n                            session = _b.sent();\n                            cognitoTokenPayload = session.getIdToken().decodePayload();\n                            return [3 /*break*/, 6];\n                        case 5:\n                            err_2 = _b.sent();\n                            return [3 /*break*/, 6];\n                        case 6:\n                            _b.trys.push([6, 11, , 12]);\n                            _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                            if (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n                                throw 'Auth is not configured';\n                            }\n                            token = void 0;\n                            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n                        case 7:\n                            federatedInfo = _b.sent();\n                            if (!federatedInfo) return [3 /*break*/, 8];\n                            token = federatedInfo.token;\n                            return [3 /*break*/, 10];\n                        case 8: return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n                        case 9:\n                            currentUser = _b.sent();\n                            if (currentUser) {\n                                token = currentUser.token;\n                            }\n                            _b.label = 10;\n                        case 10:\n                            if (token) {\n                                payload = token.split('.')[1];\n                                oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                            }\n                            return [3 /*break*/, 12];\n                        case 11:\n                            err_3 = _b.sent();\n                            logger.debug('error getting OIDC JWT', err_3);\n                            return [3 /*break*/, 12];\n                        case 12:\n                            Object.values(this.schema.namespaces).forEach(function (namespace) {\n                                Object.values(namespace.models)\n                                    .filter(function (_a) {\n                                    var syncable = _a.syncable;\n                                    return syncable;\n                                })\n                                    .forEach(function (modelDefinition) { return __awaiter(_this, void 0, void 0, function () {\n                                    var queriesMetadata;\n                                    var _this = this;\n                                    return __generator(this, function (_a) {\n                                        queriesMetadata = [\n                                            TransformerMutationType.CREATE,\n                                            TransformerMutationType.UPDATE,\n                                            TransformerMutationType.DELETE,\n                                        ].map(function (op) {\n                                            return _this.buildSubscription(namespace, modelDefinition, op, userCredentials, cognitoTokenPayload, oidcTokenPayload);\n                                        });\n                                        queriesMetadata.forEach(function (_a) {\n                                            var transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                                var variables, queryObservable, subscriptionReadyCallback;\n                                                var _this = this;\n                                                return __generator(this, function (_b) {\n                                                    variables = {};\n                                                    if (isOwner) {\n                                                        if (!ownerValue) {\n                                                            // Check if there is an owner field, check where this error should be located\n                                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                                            return [2 /*return*/];\n                                                        }\n                                                        variables[ownerField] = ownerValue;\n                                                    }\n                                                    queryObservable = API.graphql(__assign({ query: query, variables: variables }, { authMode: authMode }));\n                                                    subscriptions.push(queryObservable\n                                                        .map(function (_a) {\n                                                        var value = _a.value;\n                                                        return value;\n                                                    })\n                                                        .subscribe({\n                                                        next: function (_a) {\n                                                            var data = _a.data, errors = _a.errors;\n                                                            if (Array.isArray(errors) && errors.length > 0) {\n                                                                var messages = errors.map(function (_a) {\n                                                                    var message = _a.message;\n                                                                    return message;\n                                                                });\n                                                                logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                                                _this.drainBuffer();\n                                                                return;\n                                                            }\n                                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                                            var _b = opName, record = data[_b];\n                                                            // checking incoming subscription against syncPredicate.\n                                                            // once AppSync implements filters on subscriptions, we'll be\n                                                            // able to set these when establishing the subscription instead.\n                                                            // Until then, we'll need to filter inbound\n                                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                                                _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                                            }\n                                                            _this.drainBuffer();\n                                                        },\n                                                        error: function (subscriptionError) {\n                                                            var _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                                errors: [],\n                                                            } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                            logger.warn('subscriptionError', message);\n                                                            if (typeof subscriptionReadyCallback === 'function') {\n                                                                subscriptionReadyCallback();\n                                                            }\n                                                            if (message.includes('\"errorType\":\"Unauthorized\"')) {\n                                                                return;\n                                                            }\n                                                            observer.error(message);\n                                                        },\n                                                    }));\n                                                    promises.push((function () { return __awaiter(_this, void 0, void 0, function () {\n                                                        var boundFunction;\n                                                        var _this = this;\n                                                        return __generator(this, function (_a) {\n                                                            switch (_a.label) {\n                                                                case 0: return [4 /*yield*/, new Promise(function (res) {\n                                                                        subscriptionReadyCallback = res;\n                                                                        boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                                        Hub.listen('api', boundFunction);\n                                                                    })];\n                                                                case 1:\n                                                                    _a.sent();\n                                                                    Hub.remove('api', boundFunction);\n                                                                    return [2 /*return*/];\n                                                            }\n                                                        });\n                                                    }); })());\n                                                    return [2 /*return*/];\n                                                });\n                                            });\n                                        });\n                                        return [2 /*return*/];\n                                    });\n                                }); });\n                            });\n                            Promise.all(promises).then(function () { return observer.next(CONTROL_MSG.CONNECTED); });\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });\n            };\n        });\n        var dataObservable = new Observable(function (observer) {\n            _this.dataObserver = observer;\n            _this.drainBuffer();\n            return function () {\n                _this.dataObserver = null;\n            };\n        });\n        return [ctlObservable, dataObservable];\n    };\n    SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n        if (!predicatesGroup) {\n            return true;\n        }\n        var predicates = predicatesGroup.predicates, type = predicatesGroup.type;\n        return validatePredicate(record, type, predicates);\n    };\n    SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n        this.buffer.push([transformerMutationType, modelDefinition, data]);\n    };\n    SubscriptionProcessor.prototype.drainBuffer = function () {\n        var _this = this;\n        if (this.dataObserver) {\n            this.buffer.forEach(function (data) { return _this.dataObserver.next(data); });\n            this.buffer = [];\n        }\n    };\n    return SubscriptionProcessor;\n}());\nexport { SubscriptionProcessor };\n//# sourceMappingURL=subscription.js.map"]},"metadata":{},"sourceType":"module"}