{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar isEmptyData_1 = require(\"./isEmptyData\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    var _this = this;\n\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n\n  Sha256.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.finish();\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"sources":["../src/ie11Sha256.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private operation: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(keyData =>\n        (locateWindow() as MsWindow).msCrypto.subtle.sign(\n          SHA_256_HMAC_ALGO,\n          keyData\n        )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n        (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}