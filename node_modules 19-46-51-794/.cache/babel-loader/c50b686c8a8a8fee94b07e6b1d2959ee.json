{"ast":null,"code":"var _jsxFileName = \"/Users/genta/mapapp-aws1/mapapp-aws1/src/countries/components/CountryCreate.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Formik, Field, Form } from 'formik';\nimport { useFormik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport axios from \"axios\";\nimport { API } from '../api';\nimport { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImagePreview({\n  file\n}) {\n  _s();\n\n  const [imageSrc, setImageSrc] = useState(null);\n  useEffect(() => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setImageSrc(reader.result);\n    };\n\n    reader.readAsDataURL(file);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!imageSrc && \"Loading...\", imageSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      className: \"h-20 w-20 px-3 py-3\",\n      alt: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImagePreview, \"OOxWgbNG5e3A0ykrVn+RiF3dlH4=\");\n\n_c = ImagePreview;\nconst validationSchema = yup.object({\n  country_name: yup.string('Enter your country_name').email('Enter a valid country_name').required('country_name is required'),\n  content: yup.string('Enter your content').min(8, 'content should be of minimum 8 characters length').required('content is required')\n});\nexport function CountryCreate() {\n  _s2();\n\n  const [loading, setLoading] = useState(false);\n  const {\n    user: {\n      token\n    }\n  } = useContext(AuthContext);\n  const [file, setFile] = useState(null);\n  const history = useHistory();\n  const formik = useFormik({\n    initialValues: {\n      country_image: '',\n      country_name: '',\n      content: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit\n  });\n\n  const handleSubmit = function handleSubmit(values) {\n    console.log(values);\n    setLoading(true);\n    const data = new FormData();\n    data.append('country_image', file);\n    data.append('content', values.content);\n    data.append('country_name', values.country_name);\n    {\n      file ? axios.post(API.countries.create, data, {\n        headers: {\n          \"Authorization\": `Token ${token}`\n        }\n      }).then(res => {\n        history.push(`/countries`);\n        console.log(res.data);\n      }).finally(() => {\n        setLoading(false);\n      }) : setLoading(false).then(history.push(`/create-countries`));\n    }\n    return () => null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading && \"Loading...\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"country_name\",\n        name: \"country_name\",\n        label: \"country_name\",\n        value: formik.values.country_name // onChange={formik.handleChange}\n        ,\n        error: formik.touched.country_name && Boolean(formik.errors.country_name),\n        helperText: formik.touched.country_name && formik.errors.country_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"content\",\n        name: \"content\",\n        label: \"content\" // type=\"password\"\n        ,\n        value: formik.values.content // onChange={formik.handleChange}\n        ,\n        error: formik.touched.content && Boolean(formik.errors.content),\n        helperText: formik.touched.content && formik.errors.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        children: [\"Image Upload\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setFile(e.target.files[0]),\n          type: \"file\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), file && /*#__PURE__*/_jsxDEV(ImagePreview, {\n        file: file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(CountryCreate, \"4EAebJCfCJwMdBV2ags4o4MJ3pU=\", false, function () {\n  return [useHistory, useFormik];\n});\n\n_c2 = CountryCreate;\nexport default CountryCreate;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImagePreview\");\n$RefreshReg$(_c2, \"CountryCreate\");","map":{"version":3,"sources":["/Users/genta/mapapp-aws1/mapapp-aws1/src/countries/components/CountryCreate.js"],"names":["Formik","Field","Form","useFormik","Button","TextField","axios","API","useContext","useState","useEffect","AuthContext","useHistory","yup","ImagePreview","file","imageSrc","setImageSrc","reader","FileReader","onloadend","result","readAsDataURL","name","validationSchema","object","country_name","string","email","required","content","min","CountryCreate","loading","setLoading","user","token","setFile","history","formik","initialValues","country_image","onSubmit","handleSubmit","values","console","log","data","FormData","append","post","countries","create","headers","then","res","push","finally","touched","Boolean","errors","e","target","files","display"],"mappings":"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","sourcesContent":["import { Formik, Field, Form } from 'formik';\nimport { useFormik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport axios from \"axios\"\nimport { API } from '../api'\nimport {  useContext,useState , useEffect} from 'react';\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport {useHistory} from 'react-router-dom';\nimport * as yup from 'yup';\n\n\nfunction ImagePreview({ file }) {\n    const [imageSrc, setImageSrc] = useState(null)\n\n    useEffect(() => {\n        const reader = new FileReader()\n        reader.onloadend = () => {\n            setImageSrc(reader.result)\n        }\n        reader.readAsDataURL(file)\n    })\n\n    return (\n        <div>\n            {!imageSrc && \"Loading...\"}\n            {imageSrc && (\n                <img src={imageSrc} className=\"h-20 w-20 px-3 py-3\" alt={file.name} />\n            )}\n        </div>\n    )\n}\n\nconst validationSchema = yup.object({\n    country_name: yup\n      .string('Enter your country_name')\n      .email('Enter a valid country_name')\n      .required('country_name is required'),\n    content: yup\n      .string('Enter your content')\n      .min(8, 'content should be of minimum 8 characters length')\n      .required('content is required'),\n  });\n\n\n\nexport function CountryCreate() {\n    const [loading, setLoading] = useState(false)\n    const { user: { token } } = useContext(AuthContext)\n    const [file, setFile] = useState(null)\n    const history = useHistory();\n    \n    const formik = useFormik({\n        initialValues: {\n          country_image: '',\n          country_name: '',\n          content: '',\n        },\n        validationSchema: validationSchema,\n        onSubmit: handleSubmit\n      });\n    \n    const handleSubmit = function handleSubmit(values) {\n        console.log(values)\n        setLoading(true)\n        const data = new FormData()\n        data.append('country_image', file)\n        data.append('content', values.content)\n        data.append('country_name', values.country_name)\n\n        {file ? (\n\n        axios.post(API.countries.create, data,{\n            headers: {\n                \"Authorization\": `Token ${token}`\n            }\n        })\n            .then(res => {\n                history.push(`/countries`)\n                console.log(res.data)\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n        ):(\n            setLoading(false)\n            .then( history.push(`/create-countries`))\n           \n            \n        )}\n            return () => null\n    }\n\n    return (\n        <div>\n            {loading && \"Loading...\"}\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                fullWidth\n                id=\"country_name\"\n                name=\"country_name\"\n                label=\"country_name\"\n                value={formik.values.country_name}\n                // onChange={formik.handleChange}\n                error={formik.touched.country_name && Boolean(formik.errors.country_name)}\n                helperText={formik.touched.country_name && formik.errors.country_name}\n                />\n                <TextField\n                fullWidth\n                id=\"content\"\n                name=\"content\"\n                label=\"content\"\n                // type=\"password\"\n                value={formik.values.content}\n                // onChange={formik.handleChange}\n                error={formik.touched.content && Boolean(formik.errors.content)}\n                helperText={formik.touched.content && formik.errors.content}\n                />\n                <Button  variant=\"contained\" component=\"label\">\n                    Image Upload\n                    <input\n                    onChange={e => setFile(e.target.files[0])}\n                    type=\"file\"\n                    style={{display:'none'}}   \n                    />\n                </Button>\n                {file && (\n                    <ImagePreview file={file} />\n                )}\n                <Button  variant=\"contained\" fullWidth type=\"submit\">\n                Submit\n                </Button>\n            </form>\n            {/* <Formik\n                 initialValues={{\n                    country_image:\"\",\n                    country_name: '',\n                    content: '',\n                   \n                }}\n                validate={values => { \n                    const errors = {};\n                    if (!values.country_name) {\n                      errors.country_name = 'country_nameを入力してください' \n                    }\n                    if (!values.content) {\n                        errors.content = 'contentを入力してください' \n                      }\n                    // if (!values.country_image) {\n                    // errors.country_image = 'contentを入力してください' \n                    // }\n                    return errors;\n                  }}\n                onSubmit={handleSubmit}>\n\n                {({ errors, touched }) => (\n                    <Form>\n                        <label htmlFor=\"country_name\">country_name</label>\n                        <Field id=\"country_name\" name=\"country_name\" placeholder=\"Japan\" />\n                        {touched.country_name && errors.country_name && <div>{errors.country_name}</div>}\n\n                        <label htmlFor=\"content\">content</label>\n                        <Field id=\"content\" name=\"content\" placeholder=\"Cook\" />\n                        {touched.content && errors.content && <div>{errors.content}</div>}\n\n                        <div >\n                            <label >\n                                <span >country_image</span>\n                                <input\n                                onChange={e => setFile(e.target.files[0])}\n                                type=\"file\"\n                               \n                                />\n                            </label>\n                            {file && (\n                                <ImagePreview file={file} />\n                            )}\n                        </div>\n\n\n                        <button type=\"submit\">Submit</button>\n                    </Form>\n                )}\n\n            </Formik> */}\n        </div>\n    )\n\n}\n\nexport default CountryCreate"]},"metadata":{},"sourceType":"module"}