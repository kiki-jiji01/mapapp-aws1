{"ast":null,"code":"var _jsxFileName = \"/Users/genta/mapapp-aws1/mapapp-aws1/src/countries/components/CountryUpdate.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Formik, Field, Form } from 'formik';\nimport { useFormik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport axios from \"axios\";\nimport { API } from '../api';\nimport { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  country_name: yup.string('Enter your country_name'),\n  //   .email('Enter a valid country_name')\n  //   .required('country_name is required'),\n  content: yup.string('Enter your content') //   .min(8, 'content should be of minimum 8 characters length')\n  //   .required('content is required'),\n\n});\n\nfunction ImagePreview({\n  file\n}) {\n  _s();\n\n  const [imageSrc, setImageSrc] = useState(null);\n  useEffect(() => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setImageSrc(reader.result);\n    };\n\n    reader.readAsDataURL(file);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!imageSrc && \"Loading...\", imageSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      className: \"h-20 w-20 px-3 py-3\",\n      alt: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImagePreview, \"OOxWgbNG5e3A0ykrVn+RiF3dlH4=\");\n\n_c = ImagePreview;\nexport function CountryUpdate() {\n  _s2();\n\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [loadingCountry, setLoadingCountry] = useState(false);\n  const [file, setFile] = useState(null);\n  const [country, setCountry] = useState(null);\n  const {\n    id\n  } = useParams();\n  const {\n    user: {\n      token\n    }\n  } = useContext(AuthContext);\n  useEffect(() => {\n    if (country && !country.is_owner) {\n      history.push(`/`);\n    }\n\n    return () => null;\n  });\n  useEffect(() => {\n    setLoadingCountry(true);\n\n    function fetchCountry() {\n      axios.get(API.countries.retrieve(id), {\n        headers: {\n          \"Authorization\": `Token ${token}`\n        }\n      }).then(res => {\n        setCountry(res.data);\n      }).finally(() => {\n        setLoadingCountry(false);\n      });\n    }\n\n    fetchCountry();\n    return () => null;\n  }, [id, token]);\n  console.log(country);\n\n  function handleSubmit(values) {\n    console.log(values);\n    setLoading(true);\n    const data = new FormData();\n    data.append('country_image', file);\n    data.append('content', values.content);\n    data.append('country_name', values.country_name);\n    {\n      file ? axios.put(API.countries.update(id), data, {\n        headers: {\n          \"Authorization\": `Token ${token}`\n        }\n      }).then(res => {\n        console.log(res.data);\n        history.push(`/`);\n      }).finally(() => {\n        setLoading(false);\n      }) : setLoading(false).then(history.push(`/countries/${country.id}/update`));\n    }\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      country_image: '',\n      country_name: '',\n      content: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    sx: {\n      marginTop: \"20vh\"\n    },\n    children: [loading && \"Loading...\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"country_name\",\n        name: \"country_name\",\n        label: \"country_name\",\n        value: formik.values.country_name,\n        onChange: formik.handleChange,\n        error: formik.touched.country_name && Boolean(formik.errors.country_name),\n        helperText: formik.touched.country_name && formik.errors.country_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"content\",\n        name: \"content\",\n        label: \"content\" // type=\"password\"\n        ,\n        value: formik.values.content,\n        onChange: formik.handleChange,\n        error: formik.touched.content && Boolean(formik.errors.content),\n        helperText: formik.touched.content && formik.errors.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        sx: {\n          marginTop: 36\n        },\n        children: [\"Image Upload\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setFile(e.target.files[0]),\n          type: \"file\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), file && /*#__PURE__*/_jsxDEV(ImagePreview, {\n        file: file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        sx: {\n          marginTop: 36\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this) // <div>\n  //     {loading && \"Submitting...\"}\n  //     {loadingCountry && \"Fetching Country Details...\"}\n  //     {country && (\n  //         <Formik\n  //             initialValues={{\n  //                 country_image:country.country_image,\n  //                 country_name: country.country_name,\n  //                 content: country.content,\n  //             }}\n  //             validate={values => { \n  //                 const errors = {};\n  //                 if (!values.country_name) {\n  //                   errors.country_name = 'country_nameを入力してください' \n  //                 }\n  //                 if (!values.content) {\n  //                     errors.content = 'contentを入力してください' \n  //                   }\n  //                 // if (!values.country_image) {\n  //                 // errors.country_image = 'contentを入力してください' \n  //                 // }\n  //                 return errors;\n  //               }}\n  //             onSubmit={handleSubmit}>\n  //             {({ errors, touched }) => (\n  //                 <Form>\n  //                     <label htmlFor=\"country_name\">country_name</label>\n  //                 <Field id=\"country_name\" name=\"country_name\" placeholder=\"Japan\" />\n  //                 {touched.country_name && errors.country_name && <div>{errors.country_name}</div>}\n  //                 <label htmlFor=\"content\">content</label>\n  //                 <Field id=\"content\" name=\"content\" placeholder=\"Cook\" />\n  //                 {touched.content && errors.content && <div>{errors.content}</div>}\n  //                 <div >\n  //                     <label >\n  //                         <span >country_image</span>\n  //                         <input\n  //                         onChange={e => setFile(e.target.files[0])}\n  //                         type=\"file\"\n  //                         />\n  //                     </label>\n  //                     {file && (\n  //                         <ImagePreview file={file} />\n  //                     )}\n  //                 </div>\n  //                 <button type=\"submit\">Submit</button>\n  //                 </Form>\n  //             )}\n  //         </Formik>\n  //     )}\n  // </div>\n  ;\n}\n\n_s2(CountryUpdate, \"CRUtdHRecjz3szIwmejKKVuetYw=\", true, function () {\n  return [useHistory, useFormik];\n});\n\n_c2 = CountryUpdate;\nexport default CountryUpdate;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImagePreview\");\n$RefreshReg$(_c2, \"CountryUpdate\");","map":{"version":3,"sources":["/Users/genta/mapapp-aws1/mapapp-aws1/src/countries/components/CountryUpdate.js"],"names":["Formik","Field","Form","useFormik","Button","TextField","axios","API","useContext","useState","useEffect","AuthContext","useHistory","yup","Container","validationSchema","object","country_name","string","content","ImagePreview","file","imageSrc","setImageSrc","reader","FileReader","onloadend","result","readAsDataURL","name","CountryUpdate","history","loading","setLoading","loadingCountry","setLoadingCountry","setFile","country","setCountry","id","useParams","user","token","is_owner","push","fetchCountry","get","countries","retrieve","headers","then","res","data","finally","console","log","handleSubmit","values","FormData","append","put","update","formik","initialValues","country_image","onSubmit","marginTop","handleChange","touched","Boolean","errors","e","target","files","display"],"mappings":"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","sourcesContent":["import { Formik, Field, Form } from 'formik';\nimport { useFormik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport axios from \"axios\"\nimport { API } from '../api'\nimport {  useContext,useState , useEffect} from 'react';\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport {useHistory} from 'react-router-dom';\nimport * as yup from 'yup';\nimport Container from '@mui/material/Container';\n\nconst validationSchema = yup.object({\n    country_name: yup\n      .string('Enter your country_name'),\n    //   .email('Enter a valid country_name')\n    //   .required('country_name is required'),\n    content: yup\n      .string('Enter your content')\n    //   .min(8, 'content should be of minimum 8 characters length')\n    //   .required('content is required'),\n  });\n\nfunction ImagePreview({ file }) {\n    const [imageSrc, setImageSrc] = useState(null)\n\n    useEffect(() => {\n        const reader = new FileReader()\n        reader.onloadend = () => {\n            setImageSrc(reader.result)\n        }\n        reader.readAsDataURL(file)\n    })\n\n    return (\n        <div>\n            {!imageSrc && \"Loading...\"}\n            {imageSrc && (\n                <img src={imageSrc} className=\"h-20 w-20 px-3 py-3\" alt={file.name} />\n            )}\n        </div>\n    )\n}\n\n\n\n\nexport function CountryUpdate() {\n    const history = useHistory();\n    const [loading, setLoading] = useState(false)\n    const [loadingCountry, setLoadingCountry] = useState(false)\n    const [file, setFile] = useState(null)\n    const [country, setCountry] = useState(null)\n    const { id } = useParams()\n\n    const { user: { token } } = useContext(AuthContext)\n\n    useEffect(() => {\n        if (country && !country.is_owner) {\n            history.push(`/`)\n        }\n        return () => null\n    })\n    \n    useEffect(() => {\n        setLoadingCountry(true)\n        function fetchCountry() {\n            axios.get(API.countries.retrieve(id),{\n                headers: {\n                    \"Authorization\": `Token ${token}`\n                }\n            })\n                .then(res => {\n                    setCountry(res.data)\n                })\n                .finally(() => {\n                    setLoadingCountry(false)\n                })\n        }\n        fetchCountry()\n        return () => null\n    }, [id, token])\n\n    console.log(country)\n\n\n\n\n    function handleSubmit(values) {\n\n        console.log(values)\n        setLoading(true)\n        const data = new FormData()\n        data.append('country_image', file)\n        data.append('content', values.content)\n        data.append('country_name', values.country_name)\n\n        { file  ? (\n\n        axios.put(API.countries.update(id), data, {\n            headers: {\n                \"Authorization\": `Token ${token}`,\n               \n            }\n        })\n            .then(res => {\n                console.log(res.data)\n                history.push(`/`)\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n        ):( \n            setLoading(false)\n            .then( history.push(`/countries/${country.id}/update`))   \n        )}\n    }\n\n\n    const formik = useFormik({\n        initialValues: {\n          country_image: '',\n          country_name: '',\n          content: '',\n        },\n        validationSchema: validationSchema,\n        onSubmit: handleSubmit\n      });\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\" sx={{ marginTop: \"20vh\"}}>\n            {loading && \"Loading...\"}\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                fullWidth\n                id=\"country_name\"\n                name=\"country_name\"\n                label=\"country_name\"\n                value={formik.values.country_name}\n                onChange={formik.handleChange}\n                error={formik.touched.country_name && Boolean(formik.errors.country_name)}\n                helperText={formik.touched.country_name && formik.errors.country_name}\n                />\n                <TextField\n                fullWidth\n                id=\"content\"\n                name=\"content\"\n                label=\"content\"\n                // type=\"password\"\n                value={formik.values.content}\n                onChange={formik.handleChange}\n                error={formik.touched.content && Boolean(formik.errors.content)}\n                helperText={formik.touched.content && formik.errors.content}\n                />\n                <Button  variant=\"contained\" component=\"label\" sx={{ marginTop: 36}}>\n                    Image Upload\n                    <input\n                    onChange={e => setFile(e.target.files[0])}\n                    type=\"file\"\n                    style={{display:'none'}}   \n                />\n                </Button>\n                {file && (\n                    <ImagePreview file={file} />\n                )}\n                <Button  variant=\"contained\" fullWidth type=\"submit\" sx={{ marginTop: 36}}>\n                Submit\n                </Button>\n            </form>\n           \n        </Container>\n        // <div>\n        //     {loading && \"Submitting...\"}\n        //     {loadingCountry && \"Fetching Country Details...\"}\n        //     {country && (\n        //         <Formik\n        //             initialValues={{\n        //                 country_image:country.country_image,\n        //                 country_name: country.country_name,\n        //                 content: country.content,\n                       \n        //             }}\n        //             validate={values => { \n        //                 const errors = {};\n        //                 if (!values.country_name) {\n        //                   errors.country_name = 'country_nameを入力してください' \n        //                 }\n        //                 if (!values.content) {\n        //                     errors.content = 'contentを入力してください' \n        //                   }\n        //                 // if (!values.country_image) {\n        //                 // errors.country_image = 'contentを入力してください' \n        //                 // }\n        //                 return errors;\n        //               }}\n                      \n        //             onSubmit={handleSubmit}>\n\n        //             {({ errors, touched }) => (\n        //                 <Form>\n        //                     <label htmlFor=\"country_name\">country_name</label>\n        //                 <Field id=\"country_name\" name=\"country_name\" placeholder=\"Japan\" />\n        //                 {touched.country_name && errors.country_name && <div>{errors.country_name}</div>}\n\n        //                 <label htmlFor=\"content\">content</label>\n        //                 <Field id=\"content\" name=\"content\" placeholder=\"Cook\" />\n        //                 {touched.content && errors.content && <div>{errors.content}</div>}\n\n                        \n        //                 <div >\n        //                     <label >\n        //                         <span >country_image</span>\n        //                         <input\n        //                         onChange={e => setFile(e.target.files[0])}\n        //                         type=\"file\"\n                               \n        //                         />\n        //                     </label>\n        //                     {file && (\n        //                         <ImagePreview file={file} />\n        //                     )}\n        //                 </div>\n\n                       \n\n\n        //                 <button type=\"submit\">Submit</button>\n        //                 </Form>\n        //             )}\n\n        //         </Formik>\n        //     )}\n        // </div>\n    )\n\n}\n\nexport default CountryUpdate"]},"metadata":{},"sourceType":"module"}