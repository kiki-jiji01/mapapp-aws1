{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar ie11Sha256_1 = require(\"./ie11Sha256\");\n\nvar webCryptoSha256_1 = require(\"./webCryptoSha256\");\n\nvar sha256_js_1 = require(\"@aws-crypto/sha256-js\");\n\nvar supports_web_crypto_1 = require(\"@aws-crypto/supports-web-crypto\");\n\nvar ie11_detection_1 = require(\"@aws-crypto/ie11-detection\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {\n      this.hash = new webCryptoSha256_1.Sha256(secret);\n    } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {\n      this.hash = new ie11Sha256_1.Sha256(secret);\n    } else {\n      this.hash = new sha256_js_1.Sha256(secret);\n    }\n  }\n\n  Sha256.prototype.update = function (data, encoding) {\n    this.hash.update(data, encoding);\n  };\n\n  Sha256.prototype.digest = function () {\n    return this.hash.digest();\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;","map":{"version":3,"sources":["../src/crossPlatformSha256.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,IAAA,qBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,IAAA,MAAA;AAAA;AAAA,YAAA;AAGE,WAAA,MAAA,CAAY,MAAZ,EAA+B;AAC7B,QAAI,CAAA,GAAA,qBAAA,CAAA,iBAAA,EAAkB,CAAA,GAAA,oBAAA,CAAA,YAAA,GAAlB,CAAJ,EAAuC;AACrC,WAAK,IAAL,GAAY,IAAI,iBAAA,CAAA,MAAJ,CAAoB,MAApB,CAAZ;AACD,KAFD,MAEO,IAAI,CAAA,GAAA,gBAAA,CAAA,UAAA,EAAW,CAAA,GAAA,oBAAA,CAAA,YAAA,GAAX,CAAJ,EAAgC;AACrC,WAAK,IAAL,GAAY,IAAI,YAAA,CAAA,MAAJ,CAAe,MAAf,CAAZ;AACD,KAFM,MAEA;AACL,WAAK,IAAL,GAAY,IAAI,WAAA,CAAA,MAAJ,CAAa,MAAb,CAAZ;AACD;AACF;;AAED,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAyB,QAAzB,EAA+D;AAC7D,SAAK,IAAL,CAAU,MAAV,CAAiB,IAAjB,EAAuB,QAAvB;AACD,GAFD;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,KAAK,IAAL,CAAU,MAAV,EAAP;AACD,GAFD;;AAGF,SAAA,MAAA;AAAC,CApBD,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["import { Sha256 as Ie11Sha256 } from \"./ie11Sha256\";\nimport { Sha256 as WebCryptoSha256 } from \"./webCryptoSha256\";\nimport { Sha256 as JsSha256 } from \"@aws-crypto/sha256-js\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { supportsWebCrypto } from \"@aws-crypto/supports-web-crypto\";\nimport { isMsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private readonly hash: Hash;\n\n  constructor(secret?: SourceData) {\n    if (supportsWebCrypto(locateWindow())) {\n      this.hash = new WebCryptoSha256(secret);\n    } else if (isMsWindow(locateWindow())) {\n      this.hash = new Ie11Sha256(secret);\n    } else {\n      this.hash = new JsSha256(secret);\n    }\n  }\n\n  update(data: SourceData, encoding?: \"utf8\" | \"ascii\" | \"latin1\"): void {\n    this.hash.update(data, encoding);\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.hash.digest();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}