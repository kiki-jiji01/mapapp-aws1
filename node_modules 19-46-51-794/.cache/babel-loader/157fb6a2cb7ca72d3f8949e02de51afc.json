{"ast":null,"code":"var crypto; // Native crypto from window (Browser)\n\nif (typeof window !== 'undefined' && window.crypto) {\n  crypto = window.crypto;\n} // Native (experimental IE 11) crypto from window (Browser)\n\n\nif (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n  crypto = window.msCrypto;\n} // Native crypto from global (NodeJS)\n\n\nif (!crypto && typeof global !== 'undefined' && global.crypto) {\n  crypto = global.crypto;\n} // Native crypto import via require (NodeJS)\n\n\nif (!crypto && typeof require === 'function') {\n  try {\n    crypto = require('crypto');\n  } catch (err) {}\n}\n/*\n * Cryptographically secure pseudorandom number generator\n * As Math.random() is cryptographically not safe to use\n */\n\n\nexport default function cryptoSecureRandomInt() {\n  if (crypto) {\n    // Use getRandomValues method (Browser)\n    if (typeof crypto.getRandomValues === 'function') {\n      try {\n        return crypto.getRandomValues(new Uint32Array(1))[0];\n      } catch (err) {}\n    } // Use randomBytes method (NodeJS)\n\n\n    if (typeof crypto.randomBytes === 'function') {\n      try {\n        return crypto.randomBytes(4).readInt32LE();\n      } catch (err) {}\n    }\n  }\n\n  throw new Error('Native crypto module could not be used to get secure random number.');\n}","map":{"version":3,"sources":["/Users/genta/mapapp-aws1/mapapp-aws1/node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js"],"names":["crypto","window","msCrypto","global","require","err","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","Error"],"mappings":"AAAA,IAAIA,MAAJ,C,CAAY;;AAEZ,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACD,MAA5C,EAAoD;AAClDA,EAAAA,MAAM,GAAGC,MAAM,CAACD,MAAhB;AACD,C,CAAC;;;AAGF,IAAI,CAACA,MAAD,IAAW,OAAOC,MAAP,KAAkB,WAA7B,IAA4CA,MAAM,CAACC,QAAvD,EAAiE;AAC/DF,EAAAA,MAAM,GAAGC,MAAM,CAACC,QAAhB;AACD,C,CAAC;;;AAGF,IAAI,CAACF,MAAD,IAAW,OAAOG,MAAP,KAAkB,WAA7B,IAA4CA,MAAM,CAACH,MAAvD,EAA+D;AAC7DA,EAAAA,MAAM,GAAGG,MAAM,CAACH,MAAhB;AACD,C,CAAC;;;AAGF,IAAI,CAACA,MAAD,IAAW,OAAOI,OAAP,KAAmB,UAAlC,EAA8C;AAC5C,MAAI;AACFJ,IAAAA,MAAM,GAAGI,OAAO,CAAC,QAAD,CAAhB;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY,CAAE;AACjB;AACD;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,qBAAT,GAAiC;AAC9C,MAAIN,MAAJ,EAAY;AACV;AACA,QAAI,OAAOA,MAAM,CAACO,eAAd,KAAkC,UAAtC,EAAkD;AAChD,UAAI;AACF,eAAOP,MAAM,CAACO,eAAP,CAAuB,IAAIC,WAAJ,CAAgB,CAAhB,CAAvB,EAA2C,CAA3C,CAAP;AACD,OAFD,CAEE,OAAOH,GAAP,EAAY,CAAE;AACjB,KANS,CAMR;;;AAGF,QAAI,OAAOL,MAAM,CAACS,WAAd,KAA8B,UAAlC,EAA8C;AAC5C,UAAI;AACF,eAAOT,MAAM,CAACS,WAAP,CAAmB,CAAnB,EAAsBC,WAAtB,EAAP;AACD,OAFD,CAEE,OAAOL,GAAP,EAAY,CAAE;AACjB;AACF;;AAED,QAAM,IAAIM,KAAJ,CAAU,qEAAV,CAAN;AACD","sourcesContent":["var crypto; // Native crypto from window (Browser)\n\nif (typeof window !== 'undefined' && window.crypto) {\n  crypto = window.crypto;\n} // Native (experimental IE 11) crypto from window (Browser)\n\n\nif (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n  crypto = window.msCrypto;\n} // Native crypto from global (NodeJS)\n\n\nif (!crypto && typeof global !== 'undefined' && global.crypto) {\n  crypto = global.crypto;\n} // Native crypto import via require (NodeJS)\n\n\nif (!crypto && typeof require === 'function') {\n  try {\n    crypto = require('crypto');\n  } catch (err) {}\n}\n/*\n * Cryptographically secure pseudorandom number generator\n * As Math.random() is cryptographically not safe to use\n */\n\n\nexport default function cryptoSecureRandomInt() {\n  if (crypto) {\n    // Use getRandomValues method (Browser)\n    if (typeof crypto.getRandomValues === 'function') {\n      try {\n        return crypto.getRandomValues(new Uint32Array(1))[0];\n      } catch (err) {}\n    } // Use randomBytes method (NodeJS)\n\n\n    if (typeof crypto.randomBytes === 'function') {\n      try {\n        return crypto.randomBytes(4).readInt32LE();\n      } catch (err) {}\n    }\n  }\n\n  throw new Error('Native crypto module could not be used to get secure random number.');\n}"]},"metadata":{},"sourceType":"module"}