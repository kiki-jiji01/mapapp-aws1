{"ast":null,"code":"var _jsxFileName = \"/Users/genta/mapapp-aws1/mapapp-aws1/src/components/Map.js\";\nimport React from \"react\";\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport AutoComplete from 'react-google-autocomplete';\nimport Video from \"./Video\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyCGX39_vj1YuXzup9jOmR29Iw_u_5Y4JQM\");\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videos: [],\n      selectedVideo: null,\n      // plus\n      dhksc: {},\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      zoom: \"15\",\n      height: \"400\",\n      mapPosition: {\n        lat: 0,\n        lng: 0\n      },\n      markerPosition: {\n        lat: 0,\n        lng: 0\n      }\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && 'administrative_area_level_2' === addressArray[index].types[0]) {\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0]) {\n          for (let j = 0; j < addressArray.length; j++) {\n            if ('sublocalty_level_1' === addressArray[index].types[j] || 'localty' === addressArray[index].types[j]) {\n              area = addressArray[index].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let index = 0; index < addressArray.length; index++) {\n        for (let index = 0; index < addressArray.length; index++) {\n          if (addressArray[index].types[0] && 'administrative_area_level_1' === addressArray[index].types[0]) {\n            state = addressArray[index].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat();\n      let newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        console.log('response', response);\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          city: city ? city : \"\",\n          area: area ? area : \"\",\n          state: state ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            // plus\n      dhksc = place.address_components[0].long_name,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            newLat = place.geometry.location.lat(),\n            newLng = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        dhksc: dhksc ? dhksc : '',\n        // plus\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  area = this.getArea(addressArray),\n                  state = this.getState(addressArray);\n            this.setState({\n              address: address ? address : \"\",\n              city: city ? city : \"\",\n              area: area ? area : \"\",\n              state: state ? state : \"\"\n            });\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: 8,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n        types: ['(country)'],\n        onPlaceSelected: this.onPlaceSelected,\n        style: {\n          width: '100%',\n          height: '40px',\n          paddingLeft: '16px',\n          marginTop: '2px',\n          marginBottom: '2rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MapWithAMarker, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCGX39_vj1YuXzup9jOmR29Iw_u_5Y4JQM&v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 27\n        }, this),\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `400px`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Video, {\n        dhksc: this.state.dhksc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/genta/mapapp-aws1/mapapp-aws1/src/components/Map.js"],"names":["React","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geocode","AutoComplete","Video","setApiKey","Map","Component","state","videos","selectedVideo","dhksc","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","index","length","types","long_name","getArea","j","getState","onMarkerDragEnd","event","newLat","latLng","newLng","fromLatLng","then","response","console","log","results","formatted_address","address_components","setState","onPlaceSelected","place","geometry","location","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","MapWithAMarker","props","width","paddingLeft","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  InfoWindow,\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport AutoComplete from 'react-google-autocomplete';\nimport Video from \"./Video\";\nGeocode.setApiKey(\"AIzaSyCGX39_vj1YuXzup9jOmR29Iw_u_5Y4JQM\")\n\n\n\nclass Map extends React.Component{\n\n\n        state = {\n\n\n          videos:[],\n          selectedVideo: null,\n           // plus\n          dhksc: {},\n\n          address :\"\",\n          city :\"\",\n          area :\"\",\n          state :\"\",\n          zoom :\"15\",\n          height :\"400\",\n          mapPosition : {\n            lat:0,\n            lng:0,\n          },\n          markerPosition :{\n            lat:0,\n            lng:0,\n          },\n        }\n\n\n\n        componentDidMount() {\n          if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition( position => {\n              this.setState({\n                mapPosition :{\n                  lat: position.coords.latitude,\n                  lng: position.coords.longitude,\n                },\n                markerPosition: {\n                  lat:position.coords.latitude,\n                  lng:position.coords.longitude,\n                }\n              },() => {\n                Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\n                .then(response => {\n      \n                 const address = response.results[0].formatted_address,\n                       addressArray = response.results[0].address_components,\n                       city = this.getCity(addressArray),\n                       area = this.getArea(addressArray),\n                       state = this.getState(addressArray);\n      \n                   this.setState({\n                     address : (address) ? address : \"\",\n                     city : (city) ? city: \"\",\n                     area : (area) ? area: \"\",\n                     state: (state)? state: \"\",\n              })\n            })\n          })\n        })\n       }\n      }\n      \n\n        getCity = (addressArray) => {\n          let city = '';\n          for(let index=0; index<addressArray.length; index++) {\n            if(addressArray[index].types[0]&&'administrative_area_level_2' === addressArray[index].types[0]) {\n             city=addressArray[index].long_name;\n             return city;\n            }\n          }\n        }\n      \n      getArea=(addressArray) => {\n        let area = '';\n        for(let index=0; index<addressArray.length; index++) {\n          if(addressArray[index].types[0]){\n            for(let j =0; j<addressArray.length; j++) {\n              if('sublocalty_level_1' === addressArray[index].types[j] || 'localty' ===addressArray[index].types[j]) {\n            area = addressArray[index].long_name;\n            return area;\n            }\n           }\n          }\n         }\n        }\n      \n      getState =(addressArray) => {\n        let state = '';\n        for(let index=0; index<addressArray.length; index++) {\n          for(let index=0; index<addressArray.length; index++) {\n            if(addressArray[index].types[0] && 'administrative_area_level_1' ===addressArray[index].types[0]) {\n              state = addressArray[index].long_name;\n              return state;\n            }\n          }\n        }\n      }\n\n\n        onMarkerDragEnd= (event) => {\n          let newLat = event.latLng.lat();\n          let newLng = event.latLng.lng();\n     \n     \n          Geocode.fromLatLng(newLat,newLng)\n          .then(response => {\n           console.log('response', response)\n           const address = response.results[0].formatted_address,\n                 addressArray = response.results[0].address_components,\n                 city = this.getCity(addressArray),\n                 area = this.getArea(addressArray),\n                 state = this.getState(addressArray);\n     \n             this.setState({\n               address : (address) ? address : \"\",\n               city : (city) ? city: \"\",\n               area : (area) ? area: \"\",\n               state: (state)? state: \"\",\n               markerPosition: {\n                 lat:newLat,\n                 lng:newLng\n               },\n               mapPosition: {\n                 lat:newLat,\n                 lng:newLng\n               }\n             })\n          })\n       }\n\n       onPlaceSelected = (place) => {\n        const address = place.formatted_address,\n              addressArray = place.address_components,\n               // plus\n              dhksc = place.address_components[0].long_name,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray),\n              newLat = place.geometry.location.lat(),\n              newLng = place.geometry.location.lng();\n    \n    \n        \n          // Set these values in the state.\n          this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            dhksc: (dhksc) ? dhksc : '', 　　\n            // plus\n              markerPosition: {　\n                  lat: newLat,\n                  lng: newLng\n              },\n              mapPosition: {\n                  lat: newLat,\n                  lng: newLng\n              },\n          })\n          \n       }\n    \n    \n     \n\n   \n    render(){\n              const MapWithAMarker = withScriptjs(withGoogleMap(props =>\n                <GoogleMap\n                  defaultZoom={8}\n                  defaultCenter={{ lat: this.state.mapPosition.lat , lng: this.state.mapPosition.lng }}\n                >\n                 \n                  <Marker\n                    draggable={true}\n                    onDragEnd={this.onMarkerDragEnd}\n                    position={{ lat: this.state.markerPosition.lat , lng: this.state.markerPosition.lng}}\n                  >\n                    <InfoWindow>\n                      <div>\n                       {this.state.address}\n                      </div>\n                   </InfoWindow>\n                  </Marker>\n\n                  \n                  <AutoComplete\n                    types={['(country)']}\n                    onPlaceSelected= {this.onPlaceSelected}\n                    \n                    style={{\n                      width: '100%',\n                      height: '40px',\n                      paddingLeft: '16px',\n                      marginTop: '2px',\n                      marginBottom: '2rem'\n                  }}\n                  />\n                </GoogleMap>\n              ));\n\n\n        return(\n         <div>\n           <MapWithAMarker\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCGX39_vj1YuXzup9jOmR29Iw_u_5Y4JQM&v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `400px` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n         {/* // plus */}\n        <Video   dhksc={this.state.dhksc}/>\n         </div>\n          \n        );\n    }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}