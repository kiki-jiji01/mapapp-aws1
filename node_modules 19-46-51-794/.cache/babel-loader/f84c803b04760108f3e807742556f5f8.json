{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\n\nconst buildOptions = require('./util').buildOptions;\n\nconst xmlNode = require('./xmlNode');\n\nconst toNumber = require(\"strnum\");\n\nconst regx = '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'.replace(/NAME/g, util.nameRegexp); //const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n//polyfill\n\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\n\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false,\n  //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true,\n  //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  numParseOptions: {\n    hex: true,\n    leadingZeros: true\n  },\n  tagValueProcessor: function (a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function (a, attrName) {\n    return a;\n  },\n  stopNodes: [] //decodeStrict: false,\n\n};\nexports.defaultOptions = defaultOptions;\nconst props = ['attributeNamePrefix', 'attrNodeName', 'textNodeName', 'ignoreAttributes', 'ignoreNameSpace', 'allowBooleanAttributes', 'parseNodeValue', 'parseAttributeValue', 'arrayMode', 'trimValues', 'cdataTagName', 'cdataPositionChar', 'tagValueProcessor', 'attrValueProcessor', 'parseTrueNumberOnly', 'numParseOptions', 'stopNodes'];\nexports.props = props;\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\n\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.numParseOptions);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if (newval === 'true') return true;else if (newval === 'false') return false;else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n} //TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\n\n\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' '); //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n\n    const attrs = {};\n\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.numParseOptions);\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function (xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\"; //function match(xmlData){\n\n  for (let i = 0; i < xmlData.length; i++) {\n    const ch = xmlData[i];\n\n    if (ch === '<') {\n      if (xmlData[i + 1] === '/') {\n        //Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n        let tagName = xmlData.substring(i + 2, closeIndex).trim();\n\n        if (options.ignoreNameSpace) {\n          const colonIndex = tagName.indexOf(\":\");\n\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n          }\n        }\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n\n\n        if (currentNode) {\n          if (currentNode.val) {\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData, options);\n          } else {\n            currentNode.val = processTagValue(tagName, textData, options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = [];\n\n          if (currentNode.attrsMap == undefined) {\n            currentNode.attrsMap = {};\n          }\n\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);\n        }\n\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\");\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\");\n      } else if (xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\");\n        const tagExp = xmlData.substring(i, closeIndex);\n\n        if (tagExp.indexOf(\"[\") >= 0) {\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        } else {\n          i = closeIndex;\n        }\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9, closeIndex); //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n\n        if (textData) {\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData, options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode); //for backtracking\n\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar; //add rest value to parent node\n\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      } else {\n        //Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i + 1);\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n\n        if (separatorIndex !== -1) {\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if (options.ignoreNameSpace) {\n          const colonIndex = tagName.indexOf(\":\");\n\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        } //save text to parent node\n\n\n        if (currentNode && textData) {\n          if (currentNode.tagname !== '!xml') {\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData, options);\n          }\n        }\n\n        if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n          //selfClosing tag\n          if (tagName[tagName.length - 1] === \"/\") {\n            //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          } else {\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n\n          if (tagName !== tagExp) {\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n\n          currentNode.addChild(childNode);\n        } else {\n          //opening tag\n          const childNode = new xmlNode(tagName, currentNode);\n\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex = closeIndex;\n          }\n\n          if (tagName !== tagExp && shouldBuildAttributesMap) {\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n\n        textData = \"\";\n        i = closeIndex;\n      }\n    } else {\n      textData += xmlData[i];\n    }\n  }\n\n  return xmlObj;\n};\n\nfunction closingIndexForOpeningTag(data, i) {\n  let attrBoundary;\n  let tagExp = \"\";\n\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n\n    if (attrBoundary) {\n      if (ch === attrBoundary) attrBoundary = \"\"; //reset\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === '>') {\n      return {\n        data: tagExp,\n        index: index\n      };\n    } else if (ch === '\\t') {\n      ch = \" \";\n    }\n\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n  const closingIndex = xmlData.indexOf(str, i);\n\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;","map":{"version":3,"sources":["/Users/genta/mapapp-aws1/mapapp-aws1/node_modules/fast-xml-parser/src/xmlstr2xmlnode.js"],"names":["util","require","buildOptions","xmlNode","toNumber","regx","replace","nameRegexp","Number","parseInt","window","parseFloat","defaultOptions","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","arrayMode","trimValues","cdataTagName","cdataPositionChar","numParseOptions","hex","leadingZeros","tagValueProcessor","a","tagName","attrValueProcessor","attrName","stopNodes","exports","props","processTagValue","val","options","trim","parseValue","resolveNameSpace","tagname","tags","split","prefix","charAt","length","shouldParse","newval","isExist","attrsRegx","RegExp","buildAttributesMap","attrStr","matches","getAllMatches","len","attrs","i","undefined","Object","keys","attrCollection","getTraversalObj","xmlData","xmlObj","currentNode","textData","ch","closeIndex","findClosingIndex","substring","colonIndex","indexOf","substr","getValue","includes","child","attrsMap","startIndex","parent","tagExp","childNode","addChild","result","closingIndexForOpeningTag","data","index","separatorIndex","shouldBuildAttributesMap","lastIndexOf","attrBoundary","str","errMsg","closingIndex","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  numParseOptions: {\n    hex: true,\n    leadingZeros: true\n  },\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'numParseOptions',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.numParseOptions);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.numParseOptions\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n"]},"metadata":{},"sourceType":"script"}