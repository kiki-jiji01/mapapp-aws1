{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertToBuffer = void 0;\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\"); // Quick polyfill\n\n\nvar fromUtf8 = typeof Buffer !== \"undefined\" && Buffer.from ? function (input) {\n  return Buffer.from(input, \"utf8\");\n} : util_utf8_browser_1.fromUtf8;\n\nfunction convertToBuffer(data) {\n  // Already a Uint8, do nothing\n  if (data instanceof Uint8Array) return data;\n\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}\n\nexports.convertToBuffer = convertToBuffer;","map":{"version":3,"sources":["../src/convertToBuffer.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;AAGA,IAAA,mBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA,C,CAEA;;;AACA,IAAM,QAAQ,GACZ,OAAO,MAAP,KAAkB,WAAlB,IAAiC,MAAM,CAAC,IAAxC,GACI,UAAC,KAAD,EAAc;AAAK,SAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAA,MAAA,CAAA;AAA0B,CADjD,GAEI,mBAAA,CAAA,QAHN;;AAKA,SAAgB,eAAhB,CAAgC,IAAhC,EAAgD;AAC9C;AACA,MAAI,IAAI,YAAY,UAApB,EAAgC,OAAO,IAAP;;AAEhC,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,QAAQ,CAAC,IAAD,CAAf;AACD;;AAED,MAAI,WAAW,CAAC,MAAZ,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,WAAO,IAAI,UAAJ,CACL,IAAI,CAAC,MADA,EAEL,IAAI,CAAC,UAFA,EAGL,IAAI,CAAC,UAAL,GAAkB,UAAU,CAAC,iBAHxB,CAAP;AAKD;;AAED,SAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACD;;AAjBD,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 as fromUtf8Browser } from \"@aws-sdk/util-utf8-browser\";\n\n// Quick polyfill\nconst fromUtf8 =\n  typeof Buffer !== \"undefined\" && Buffer.from\n    ? (input: string) => Buffer.from(input, \"utf8\")\n    : fromUtf8Browser;\n\nexport function convertToBuffer(data: SourceData): Uint8Array {\n  // Already a Uint8, do nothing\n  if (data instanceof Uint8Array) return data;\n\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}