{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.toHash = new Uint8Array(0);\n\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n\n  Sha256.prototype.update = function (data) {\n    if ((0, util_1.isEmptyData)(data)) {\n      return;\n    }\n\n    var update = (0, util_1.convertToBuffer)(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n\n  Sha256.prototype.digest = function () {\n    var _this = this;\n\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n\n    if ((0, util_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;","map":{"version":3,"sources":["../src/webCryptoSha256.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAKA,IAAA,oBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,IAAA,MAAA;AAAA;AAAA,YAAA;AAIE,WAAA,MAAA,CAAY,MAAZ,EAA+B;AAFvB,SAAA,MAAA,GAAqB,IAAI,UAAJ,CAAe,CAAf,CAArB;;AAGN,QAAI,MAAM,KAAK,KAAK,CAApB,EAAuB;AACrB,WAAK,GAAL,GAAW,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACrC,SAAA,GAAA,oBAAA,CAAA,YAAA,IACG,MADH,CACU,MADV,CACiB,SADjB,CAEI,KAFJ,EAGI,CAAA,GAAA,MAAA,CAAA,eAAA,EAAgB,MAAhB,CAHJ,EAII,WAAA,CAAA,iBAJJ,EAKI,KALJ,EAMI,CAAC,MAAD,CANJ,EAQG,IARH,CAQQ,OARR,EAQiB,MARjB;AASD,OAVU,CAAX;AAWA,WAAK,GAAL,CAAS,KAAT,CAAe,YAAA,CAAQ,CAAvB;AACD;AACF;;AAED,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAuB;AACrB,QAAI,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,IAAZ,CAAJ,EAAuB;AACrB;AACD;;AAED,QAAM,MAAM,GAAG,CAAA,GAAA,MAAA,CAAA,eAAA,EAAgB,IAAhB,CAAf;AACA,QAAM,UAAU,GAAG,IAAI,UAAJ,CACjB,KAAK,MAAL,CAAY,UAAZ,GAAyB,MAAM,CAAC,UADf,CAAnB;AAGA,IAAA,UAAU,CAAC,GAAX,CAAe,KAAK,MAApB,EAA4B,CAA5B;AACA,IAAA,UAAU,CAAC,GAAX,CAAe,MAAf,EAAuB,KAAK,MAAL,CAAY,UAAnC;AACA,SAAK,MAAL,GAAc,UAAd;AACD,GAZD;;AAcA,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,GAAT,EAAc;AACZ,aAAO,KAAK,GAAL,CAAS,IAAT,CAAc,UAAC,GAAD,EAAI;AACvB,eAAA,CAAA,GAAA,oBAAA,CAAA,YAAA,IACG,MADH,CACU,MADV,CACiB,IADjB,CACsB,WAAA,CAAA,iBADtB,EACyC,GADzC,EAC8C,KAAI,CAAC,MADnD,EAEG,IAFH,CAEQ,UAAC,IAAD,EAAK;AAAK,iBAAA,IAAI,UAAJ,CAAA,IAAA,CAAA;AAAoB,SAFtC,CAAA;AAEuC,OAHlC,CAAP;AAKD;;AAED,QAAI,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,KAAK,MAAjB,CAAJ,EAA8B;AAC5B,aAAO,OAAO,CAAC,OAAR,CAAgB,WAAA,CAAA,kBAAhB,CAAP;AACD;;AAED,WAAO,OAAO,CAAC,OAAR,GACJ,IADI,CACC,YAAA;AACJ,aAAA,CAAA,GAAA,oBAAA,CAAA,YAAA,IAAe,MAAf,CAAsB,MAAtB,CAA6B,MAA7B,CAAoC,WAAA,CAAA,YAApC,EAAkD,KAAI,CAAC,MAAvD,CAAA;AAA8D,KAF3D,EAIJ,IAJI,CAIC,UAAC,IAAD,EAAK;AAAK,aAAA,OAAO,CAAC,OAAR,CAAgB,IAAI,UAAJ,CAAhB,IAAgB,CAAhB,CAAA;AAAqC,KAJhD,CAAP;AAKD,GAlBD;;AAmBF,SAAA,MAAA;AAAC,CAtDD,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nimport {\n  EMPTY_DATA_SHA_256,\n  SHA_256_HASH,\n  SHA_256_HMAC_ALGO,\n} from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_256_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve()\n      .then(() =>\n        locateWindow().crypto.subtle.digest(SHA_256_HASH, this.toHash)\n      )\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}